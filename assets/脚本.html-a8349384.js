import{_ as o,X as t,Y as r,$ as n,a0 as e,F as s}from"./framework-decf3de5.js";const h={},c=e('<h2 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本" aria-hidden="true">#</a> 脚本</h2><p>脚本决定了采样器通过什么逻辑进行画图。</p><h2 id="词条矩阵" tabindex="-1"><a class="header-anchor" href="#词条矩阵" aria-hidden="true">#</a> 词条矩阵</h2><p>词条矩阵是通过识别词条的排列规律进行画图，一般以上述同典的人物重要程度排列分析，看中的是词条的排列顺序，词如其名，需要将词条加上中括来供AI识别，变量不发指的是对该词条的误差程度。</p><p>如，ai会在使用此脚本前创建一个坐标系，将设置变量部分导入内置模型计算后根据数据波动决定词条的难度，也就是误差。</p><p>引用CHATGPT的话<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><blockquote><p>首先，词条矩阵是一种通过识别词条排列规律进行画图的方法。一般来说，这种方法会将同一典故或同一人物的不同词条按照其在典故或人物中的重要程度排列，并根据排列顺序画出矩阵。例如，如果我们想分析《红楼梦》中人物的关系，我们可以将主要人物按照重要程度排列，然后画出一个矩阵，从而更好地了解人物之间的关系。</p></blockquote><blockquote><p>在这个过程中，为了让人工智能能够识别词条，我们需要在词条前后加上中括号，比如[主角]，[配角]等等。而变量部分指的是人工智能对该词条的误差程度。为了让人工智能能够更好地识别词条，我们需要将设置的变量部分输入内置模型计算，然后根据数据波动来决定词条的准确度，也就是误差。换句话说，误差越小，词条的准确度就越高。</p></blockquote><blockquote><p>举个例子，假如我们想要分析《三国演义》中主要人物的关系，我们可以将主要人物的名字按照其在故事中的重要程度排列，比如[曹操]、[刘备]、[孙权]等等，然后画出一个矩阵。在这个过程中，我们需要设置一些变量，比如判断不同的人物关系的数据点，这些变量会被输入内置模型中进行计算，根据数据波动来决定词条的准确度，从而更好地了解人物之间的关系。</p></blockquote><p>尝试画一个图来示例，<strong>设词条a,b,c,d作为x轴,文本1,2,3,4作为y轴</strong><sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup></p>',10),i=e('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>此散点图仅供参考，请以实际为准，散点图数据由Claude生成</p></div><h2 id="x-y图表" tabindex="-1"><a class="header-anchor" href="#x-y图表" aria-hidden="true">#</a> X，Y图表</h2><p>X/Y图表一般多用于测试当中,方便测试各参数对同- -套词条串的影响。多图并跑，并在效果图上表明该图是什么变量引起的画面差异。</p><p>如，将XY设置为随机种子与cfg,那么效果图上就会显示同种子，不同cfg的参数，以便测试者观察并记录数据。</p><h2 id="从文本框或文件载入提示词" tabindex="-1"><a class="header-anchor" href="#从文本框或文件载入提示词" aria-hidden="true">#</a> 从文本框或文件载入提示词</h2><p>这个功能类似反推提示词,一般用于tag丟失的情况下使用,但是这这个不需要再多一步将提示词从 i2i (图生图)中复制出来的操作。这个功能的本质是一个逻辑插件，勾选这个功能可以使ai强化对自然语言（长吟唱）的理解。</p><p>在先前的脚本(或无脚本)中，大多数的分析权重分在了短吟唱(即形容词/名词的单词式)而非从句形式的自然语言，这个脚本加强了对自然语言也就是从句式的权重。类似于i2i.</p><h2 id="随机种子" tabindex="-1"><a class="header-anchor" href="#随机种子" aria-hidden="true">#</a> 随机种子</h2><p>随机种子，是一种控制噪声扩散的一个参数或变量，一般在数值为-1的时候为随机种子，即随机生成一个噪点位置固定的图片，当噪点固定，则图片就固定,所以当种子相同时，图必定一致。差异种子则是对扩散声源进行的差异化处理。即，噪点不同，因此图片就有不同，但是随机种子固定，所以图片元素不同。由此也可以知道，差异种子强度是控制图片的随机性的。差异种子强度展开就是差异种子的应用程度，程度越高，噪点差异越大，图片差异也就越大。</p><h2 id="美术风格" tabindex="-1"><a class="header-anchor" href="#美术风格" aria-hidden="true">#</a> 美术风格</h2><p>类似训练，如果生成了一张质量很高的图片,但是想让后续图片风格与此图片差距不大，那么这个时候就可以使用美术风格了。</p><h2 id="学习率" tabindex="-1"><a class="header-anchor" href="#学习率" aria-hidden="true">#</a> 学习率:</h2><p>学习率顾名思义，指的是AI学习的效率，越高学习速度，但是精度会降低，反之同理</p><h2 id="迭代步数-美术权重" tabindex="-1"><a class="header-anchor" href="#迭代步数-美术权重" aria-hidden="true">#</a> 迭代步数/美术权重:</h2><p>指的是在规定步数内使用该美术风格完毕，意思是，在规定内步数，ai才会使用先前学习到的风格，超过步数后，ai就不会使用之前生成的美术风格进行渲染了。-般来说都是用于强化该图片的风格。</p><p>而美术权重则是在该图中风格的强度，与词条串中的权重同理</p><h2 id="美术风格描述" tabindex="-1"><a class="header-anchor" href="#美术风格描述" aria-hidden="true">#</a> 美术风格描述:</h2><p>指的是对该风格的确切描述，如魔幻风输入magic等 输入后会对风格进一步强调， 效果图更贴合描述</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>本文理论指导:CHATGPT，Claude <a href="#footnote-ref1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:1" class="footnote-backref">↩︎</a></p></li></ol></section>',20);function d(p,l){const a=s("ChartJS");return t(),r("div",null,[c,n(a,{id:"chart-36",config:"eJydkb0KwjAUhfc+xSWTQgfb6qCrjyEOqQYpxqa0ESzSzd3VzcXFB3DxgSy+hbnp7Y9QHFwScr6bc0LO0QFgOk8EmwHLVlxrkTIXxTXX3Ig4QKdM6MwoC6sAEUslD4VEh/J6f18e5e35Op2tDQ2QWX3VXgd2MFLgAsvN7kHRzjd0RNTvpT7RoJd6RMc/6T+5Ne3PrV9lchu47PxFyFfbTar28XqupErx29JNOPAnExemUxe8wB8yGq8clma1SUwlOlIxtkC9mMqkaM9GwSd0qqm7lVEseFUtkURlEbohDZXWavedimvhFM4Hz1d5iw==",title:"%E8%AF%8D%E6%9D%A1%E7%9F%A9%E9%98%B5%E7%A4%BA%E4%BE%8B",type:"json"}),i])}const u=o(h,[["render",d],["__file","脚本.html.vue"]]);export{u as default};
